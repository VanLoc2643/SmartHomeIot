import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter_facebook_auth/flutter_facebook_auth.dart';
import 'package:google_sign_in/google_sign_in.dart';

class AuthService {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final GoogleSignIn _googleSignIn = GoogleSignIn();
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  User? get currentUser => _auth.currentUser;
  FirebaseFirestore get firestore => _firestore;

  Future<User?> signInWithGoogle() async {
    try {
      final GoogleSignInAccount? googleUser = await GoogleSignIn().signIn();
      if (googleUser == null) return null;

      final GoogleSignInAuthentication googleAuth =
          await googleUser.authentication;

      if (googleAuth.idToken == null || googleAuth.accessToken == null) {
        throw FirebaseAuthException(
          code: "ERROR_MISSING_GOOGLE_AUTH_TOKEN",
          message: "Kh√¥ng l·∫•y ƒë∆∞·ª£c Google ID Token.",
        );
      }

      final OAuthCredential credential = GoogleAuthProvider.credential(
        accessToken: googleAuth.accessToken,
        idToken: googleAuth.idToken,
      );

      UserCredential userCredential = await FirebaseAuth.instance
          .signInWithCredential(credential);
      return userCredential.user;
    } catch (e) {
      print("üî• L·ªói ƒëƒÉng nh·∫≠p Google: $e");
      return null;
    }
  }

  Future<void> _createUserInFirestore(User? user) async {
    if (user == null) return;

    final userDoc = _firestore.collection('users').doc(user.uid);
    final docSnapshot = await userDoc.get();

    if (!docSnapshot.exists) {
      await userDoc.set({
        'uid': user.uid,
        'email': user.email,
        'name': user.displayName ?? '',
        'photoUrl': user.photoURL ?? '',
        'friends': [],
        'lastSeen': FieldValue.serverTimestamp(),
      });
    }
  }

  /// üöÄ ƒêƒÉng nh·∫≠p Facebook
  Future<User?> signInWithFacebook() async {
    try {
      final LoginResult result = await FacebookAuth.instance.login();
      if (result.status == LoginStatus.success) {
        final AccessToken accessToken = result.accessToken!;
        final OAuthCredential credential = FacebookAuthProvider.credential(
          accessToken.tokenString,
        );

        UserCredential userCredential = await _auth.signInWithCredential(
          credential,
        );

        // üîÑ Ch·ªù c·∫≠p nh·∫≠t FirebaseAuth
        await Future.delayed(Duration(seconds: 2));
        // T·∫°o ng∆∞·ªùi d√πng trong Firestore n·∫øu ch∆∞a t·ªìn t·∫°i
        await _createUserInFirestore(userCredential.user);
        return userCredential.user;
      } else {
        print("‚ùå Ng∆∞·ªùi d√πng ƒë√£ h·ªßy ƒëƒÉng nh·∫≠p Facebook.");
      }
    } catch (e) {
      print("üî• L·ªói ƒëƒÉng nh·∫≠p Facebook: $e");
    }
    return null;
  }

  /// üöÄ ƒêƒÉng nh·∫≠p GitHub
  Future<User?> signInWithGitHub() async {
    try {
      GithubAuthProvider githubProvider = GithubAuthProvider();
      UserCredential userCredential = await _auth.signInWithProvider(
        githubProvider,
      );

      // üîÑ Ch·ªù c·∫≠p nh·∫≠t FirebaseAuth
      await Future.delayed(Duration(seconds: 2));
      // T·∫°o ng∆∞·ªùi d√πng trong Firestore n·∫øu ch∆∞a t·ªìn t·∫°i
      await _createUserInFirestore(userCredential.user);
      return userCredential.user;
    } on FirebaseAuthException catch (e) {
      print("L·ªói ƒëƒÉng nh·∫≠p GitHub: ${e.message}");

      if (e.code == "web-context-canceled") {
        print("Ng∆∞·ªùi d√πng ƒë√£ ƒë√≥ng c·ª≠a s·ªï ƒëƒÉng nh·∫≠p.");
      } else if (e.code == "redirect_uri_mismatch") {
        print("L·ªói Redirect URI: Ki·ªÉm tra GitHub Developer Settings.");
      }
      return null;
    }
  }

  /// üö™ ƒêƒÉng xu·∫•t t√†i kho·∫£n
  Future<void> signOut() async {
    try {
      await _auth.signOut();
      if (await _googleSignIn.isSignedIn()) {
        await _googleSignIn.signOut();
      }
      await FacebookAuth.instance.logOut();

      print("‚úÖ ƒê√£ ƒëƒÉng xu·∫•t th√†nh c√¥ng!");
    } catch (e) {
      print("üî• L·ªói khi ƒëƒÉng xu·∫•t: $e");
    }
  }

  /// üîç T√¨m ki·∫øm ng∆∞·ªùi d√πng
  Future<QuerySnapshot> searchUsers(String query) async {
    return _firestore
        .collection("users")
        .where("name", isGreaterThanOrEqualTo: query)
        .get();
  }

  /// üì© G·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n
  Future<void> sendFriendRequest(String currentUserId, String friendId) async {
    await _firestore
        .collection("friend_requests")
        .doc("$currentUserId\_$friendId")
        .set({
          "from": currentUserId,
          "to": friendId,
          "status": "pending",
          "timestamp": FieldValue.serverTimestamp(),
        });
  }

  Future<void> acceptFriendRequest(
    String currentUserId,
    String friendId,
  ) async {
    final currentUserDoc = _firestore.collection("users").doc(currentUserId);
    final friendDoc = _firestore.collection("users").doc(friendId);

    final currentUserSnapshot = await currentUserDoc.get();
    final friendSnapshot = await friendDoc.get();

    if (!currentUserSnapshot.exists || !friendSnapshot.exists) {
      print("M·ªôt trong hai t√†i li·ªáu ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i.");
      return;
    }

    await currentUserDoc.update({
      "friends": FieldValue.arrayUnion([friendId]),
    });

    await friendDoc.update({
      "friends": FieldValue.arrayUnion([currentUserId]),
    });

    await _firestore
        .collection("friend_requests")
        .doc("$friendId\_$currentUserId")
        .delete();
  }

  // Future<void> deleteFriendRequest(
  //   String currentUserId,
  //   String friendId,
  // ) async {
  //   try {
  //     await _firestore
  //         .collection("friend_requests")
  //         .doc("$friendId\_$currentUserId")
  //         .delete();
  //     print("‚úÖ ƒê√£ x√≥a l·ªùi m·ªùi k·∫øt b·∫°n th√†nh c√¥ng!");
  //   } catch (e) {
  //     print("üî• L·ªói khi x√≥a l·ªùi m·ªùi k·∫øt b·∫°n: $e");
  //   }
  // }
  Future<void> deleteFriendRequest(
    String currentUserId,
    String friendId,
  ) async {
    try {
      await _firestore
          .collection("friend_requests")
          .doc("$currentUserId\_$friendId")
          .delete();
      print("‚úÖ ƒê√£ h·ªßy y√™u c·∫ßu k·∫øt b·∫°n!");
    } catch (e) {
      print("üî• L·ªói khi h·ªßy y√™u c·∫ßu k·∫øt b·∫°n: $e");
    }
  }

  /// üí¨ L·∫•y danh s√°ch tin nh·∫Øn gi·ªØa ng∆∞·ªùi d√πng hi·ªán t·∫°i v√† c√°c ng∆∞·ªùi d√πng kh√°c
  Stream<QuerySnapshot> getMessages(String senderId, String receiverId) {
    return _firestore
        .collection('messages')
        .where('senderId', whereIn: [senderId, receiverId])
        .where('receiverId', whereIn: [senderId, receiverId])
        .orderBy('timestamp', descending: true)
        .snapshots();
  }

  /// üìú L·∫•y danh s√°ch b·∫°n b√®
  Stream<DocumentSnapshot> getFriendsList(String userId) {
    return _firestore.collection("users").doc(userId).snapshots();
  }

  Future<void> sendMessage(String receiverId, String content) async {
    final senderId = currentUser?.uid;
    if (senderId == null) return;

    await _firestore.collection('messages').add({
      'senderId': senderId,
      'receiverId': receiverId,
      'content': content,
      'timestamp': FieldValue.serverTimestamp(),
      'isRead': false, // Th√™m tr∆∞·ªùng isRead
    });
  }

  Future<void> markMessagesAsRead(String senderId, String receiverId) async {
    final querySnapshot =
        await _firestore
            .collection('messages')
            .where('senderId', isEqualTo: senderId)
            .where('receiverId', isEqualTo: receiverId)
            .where('isRead', isEqualTo: false)
            .get();

    for (var doc in querySnapshot.docs) {
      await doc.reference.update({'isRead': true});
    }
  }

  Stream<int> getUnreadMessagesCount(String userId) {
    return _firestore
        .collection('messages')
        .where('receiverId', isEqualTo: userId)
        .where('isRead', isEqualTo: false)
        .snapshots()
        .map((snapshot) => snapshot.docs.length);
  }

  Stream<int> getPendingFriendRequestsCount(String userId) {
    return _firestore
        .collection('friend_requests')
        .where('to', isEqualTo: userId)
        .where('status', isEqualTo: 'pending')
        .snapshots()
        .map((snapshot) => snapshot.docs.length);
  }

  Future<void> deleteMessage(String messageId) async {
    await _firestore.collection('messages').doc(messageId).delete();
  }

  Future<void> markMessageAsUnread(String messageId) async {
    await _firestore.collection('messages').doc(messageId).update({
      'isRead': false,
    });
  }

  Future<void> deleteChat(String friendId) async {
    final userId = currentUser?.uid;
    if (userId == null) return;

    final querySnapshot =
        await _firestore
            .collection('messages')
            .where('senderId', whereIn: [userId, friendId])
            .where('receiverId', whereIn: [userId, friendId])
            .get();

    for (var doc in querySnapshot.docs) {
      await doc.reference.delete();
    }
  }

  Future<void> markChatAsUnread(String friendId) async {
    final userId = currentUser?.uid;
    if (userId == null) return;

    final querySnapshot =
        await _firestore
            .collection('messages')
            .where('senderId', whereIn: [userId, friendId])
            .where('receiverId', whereIn: [userId, friendId])
            .orderBy('timestamp', descending: true)
            .limit(1)
            .get();

    for (var doc in querySnapshot.docs) {
      await doc.reference.update({'isRead': false});
    }
  }

  Future<DocumentSnapshot?> getLatestMessage(
    String userId,
    String friendId,
  ) async {
    final querySnapshot =
        await _firestore
            .collection('messages')
            .where('senderId', whereIn: [userId, friendId])
            .where('receiverId', whereIn: [userId, friendId])
            .orderBy('timestamp', descending: true)
            .limit(1)
            .get();

    if (querySnapshot.docs.isNotEmpty) {
      return querySnapshot.docs.first;
    }
    return null;
  }

  Future<void> removeFriend(String currentUserId, String friendId) async {
    try {
      final currentUserDoc = _firestore.collection("users").doc(currentUserId);
      final friendDoc = _firestore.collection("users").doc(friendId);

      await currentUserDoc.update({
        "friends": FieldValue.arrayRemove([friendId]),
      });

      await friendDoc.update({
        "friends": FieldValue.arrayRemove([currentUserId]),
      });

      print("‚úÖ ƒê√£ x√≥a b·∫°n b√® th√†nh c√¥ng!");
    } catch (e) {
      print("üî• L·ªói khi x√≥a b·∫°n b√®: $e");
    }
  }
}
